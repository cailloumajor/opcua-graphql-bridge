name: Continuous integration and deployment

on:
  push:
    branches:
      - master
    tags:
      - "**"
  pull_request:
    branches:
      - master

env:
  PYTHON_VERSION: "3.8"

jobs:
  virtual-env:
    name: Build virtual environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Get Poetry version to install
        id: poetry-version
        run: |
          source poetry_install_vars.sh
          echo "::set-output name=version::$POETRY_VERSION"
      - name: Install Poetry ${{ steps.poetry-version.outputs.version }}
        uses: Gr1N/setup-poetry@v4
        with:
          poetry-version: ${{ steps.poetry-version.outputs.version }}
      - name: Set up Poetry cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: poetry install --no-interaction
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
      # Archive virtual environment to keep file permissions
      - name: Archive virtual environment
        run: tar -acf /tmp/virtual-environment.tar.zst .venv/
      - name: Upload virtual environment artifact
        uses: actions/upload-artifact@v2
        with:
          name: virtual-environment
          path: /tmp/virtual-environment.tar.zst
          if-no-files-found: error
          retention-days: 1
  code-quality:
    name: Code quality
    runs-on: ubuntu-latest
    needs:
      - virtual-env
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Download virtual environment artifact
        uses: actions/download-artifact@v2
        with:
          name: virtual-environment
          path: /tmp
      - name: Extract virtual environment
        run: |
          tar -xf /tmp/virtual-environment.tar.zst
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - uses: pre-commit/action@v2.0.0
        env:
          SKIP: mypy
      - name: Set up mypy cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/mypy
          key: ${{ runner.os }}-mypy-${{ hashFiles('src/opcua_webhmi_bridge/**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-mypy-
      - name: Check static typing of the main package
        run: mypy src/opcua_webhmi_bridge
  unit-tests:
    name: Unit tests and code coverage
    runs-on: ubuntu-latest
    needs:
      - virtual-env
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Download virtual environment artifact
        uses: actions/download-artifact@v2
        with:
          name: virtual-environment
          path: /tmp
      - name: Extract virtual environment
        run: |
          tar -xf /tmp/virtual-environment.tar.zst
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - name: Run unit tests
        run: pytest -vv --cov-report=xml tests/unit
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          flags: unittests
          fail_ci_if_error: true
  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run integration tests
        run: docker-compose -f tests/integration/docker-compose.yml run --rm --use-aliases integration-tests
      - name: Print logs of services
        run: docker-compose -f tests/integration/docker-compose.yml logs
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: opcua-webhmi-bridge:integration-tests
          format: template
          template: "@/contrib/sarif.tpl"
          output: trivy-results.sarif
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy-results.sarif
  docker-tag-format:
    name: Check tag format
    runs-on: ubuntu-latest
    needs:
      - code-quality
      - unit-tests
      - integration-tests
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      match: ${{ steps.check-tag.outputs.match }}
      tag: ${{ steps.check-tag.outputs.tag }}
    steps:
      - id: check-tag
        run: |
          if expr "$GITHUB_REF" : '^refs/tags/[0-9]\{8\}\.[0-9]$'
          then
              echo "::set-output name=match::true"
              echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
          else
              echo "Tag format must be YYYYMMDD.n to trigger image build."
          fi
  docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs:
      - docker-tag-format
    if: needs.docker-tag-format.outputs.match == 'true'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.docker-tag-format.outputs.tag }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
