name: Continuous integration and deployment

on:
  push:
    branches:
      - master
    tags:
      - "**"
  pull_request:
    branches:
      - master

jobs:
  hooks:
    name: Code quality hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.0
        env:
          SKIP: mypy
  tests:
    name: Tests and code coverage
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.8"
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Set up Poetry cache for Python dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry/cache
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    - name: Install Poetry
      run: |
        source poetry_install_vars.sh
        curl -sSL -o get-poetry.py "$POETRY_URL"
        python get-poetry.py --yes --no-modify-path --version="$POETRY_VERSION"
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    - name: Install dependencies
      run: poetry install --no-interaction
    - name: Set up mypy cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/mypy
        key: ${{ runner.os }}-mypy-${{ hashFiles('src/opcua_webhmi_bridge/**/*.py') }}
        restore-keys: |
          ${{ runner.os }}-mypy-
    - name: Check static typing of the main package
      run: poetry run mypy src/opcua_webhmi_bridge
    - name: Test with pytest
      run: poetry run pytest -vv --cov=opcua_webhmi_bridge --cov-report=xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        flags: unittests
        fail_ci_if_error: true
  docker-tag-format:
    name: Check tag format
    runs-on: ubuntu-latest
    needs:
      - hooks
      - tests
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      match: ${{ steps.check-tag.outputs.match }}
      tag: ${{ steps.check-tag.outputs.tag }}
    steps:
      - id: check-tag
        run: |
          if expr "$GITHUB_REF" : '^refs/tags/[0-9]\{8\}\.[0-9]$'
          then
              echo "::set-output name=match::true"
              echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
          else
              echo "Tag format must be YYYYMMDD.n to trigger image build."
          fi
  docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs:
      - docker-tag-format
    if: needs.docker-tag-format.outputs.match == 'true'
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.docker-tag-format.outputs.tag }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
